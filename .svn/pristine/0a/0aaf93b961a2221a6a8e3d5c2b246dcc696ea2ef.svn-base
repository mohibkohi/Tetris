/*
 * CSS 305. KeyboardControl
 */
package control;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import model.Board;
import view.TetrisGamePanel;

/**
 * Keyboard controls class.
 * 
 * @author mohibkohi
 * @version 1.0.
 */
public class KeyboardControl extends KeyAdapter {

    /**
     * Board field.
     */
    private final Board myBoard;

    /**
     * Game panel.
     */
    private final TetrisGamePanel myGamePanel;

    /**
     * Game over field.
     */
    private boolean myGameOver;
    
    /**
     * Constructor for controls.
     * 
     * @param theBoard board.
     * @param theGamePanel my panel.
     */
    public KeyboardControl(final Board theBoard, final TetrisGamePanel theGamePanel) {
        super();
        myBoard = theBoard;
        
        myGamePanel = theGamePanel;
        myGamePanel.addPropertyChangeListener(new PropertyChangeListener()  {

            @Override
            public void propertyChange(final PropertyChangeEvent theEvent) {
                if ("On".equals(theEvent.getPropertyName())) {
                    myGameOver = true;
                } else if ("Off".equals(theEvent.getPropertyName())) {
                    myGameOver = false;
                }
                
            }
            
        });
    }

    /**
     * Handles a key being typed.
     * 
     * @param theEvent The KeyEvent generated by the key.
     */
    public void keyPressed(final KeyEvent theEvent) {
        if (myGameOver) {
            if (theEvent.getKeyCode() == KeyEvent.VK_A) {
                if (myGamePanel.isTimerOn()) {
                    myGamePanel.setGamePuse(true);
                } else {
                    myGamePanel.setGamePuse(false);
                }
            } else if (myGamePanel.isTimerOn()) {
                gameMovements(theEvent);
            }
        }
    }
    
    /**
     * The keyboard movements.
     * @param theEvent key.
     */
    private void gameMovements(final KeyEvent theEvent) {
        switch (theEvent.getKeyCode()) {
            case KeyEvent.VK_RIGHT:
                myBoard.right();
                break;
            case KeyEvent.VK_LEFT:
                myBoard.left();
                break;
            case KeyEvent.VK_UP:
                myBoard.rotateCW();
                break;
            case KeyEvent.VK_DOWN:
                myBoard.down();
                break;
            case KeyEvent.VK_SPACE:
                myBoard.drop();
                break;
            case KeyEvent.VK_Z:
                myBoard.rotateCCW();
                break;
            default:
                break;
        }
    }
    
}
